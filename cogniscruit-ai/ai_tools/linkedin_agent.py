import logging
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from ai_tools.model_selector import get_llm

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_linkedin_profile(linkedin_data, model_name="mistral"):
    """
    Uses an LLM to analyze LinkedIn title and description and generate a branding summary.

    Args:
        linkedin_data (dict): Dictionary with 'title' and 'description' from LinkedIn profile
        model_name (str): Optional model name, default is 'mistral'

    Returns:
        str: A summary generated by the LLM based on the LinkedIn metadata
    """
    logger.info("Initializing LLM for LinkedIn analysis with model: %s", model_name)
    llm = get_llm(model_name)

    if not llm:
        logger.error("Model initialization failed for model: %s", model_name)
        return "Error: Model initialization failed."

    title = linkedin_data.get("title", "")
    description = linkedin_data.get("description", "")

    logger.info("LinkedIn title: %s", title)
    logger.info("LinkedIn description: %s", description)

    prompt = PromptTemplate(
        input_variables=["title", "description"],
        template="""
You are a professional branding analyst. Based on the LinkedIn title and profile description below, summarize the candidate's professional identity, areas of expertise, and likely career focus.

Title: {title}

Description: {description}

Return a concise 2-3 sentence summary of the candidate's personal brand:
"""
    )

    chain = LLMChain(llm=llm, prompt=prompt)
    try:
        result = chain.run({
            "title": title,
            "description": description
        })
        logger.info("LinkedIn profile summary generated:")
        logger.info(result)
        return result
    except Exception as e:
        error_msg = f"Error generating LinkedIn summary: {str(e)}"
        logger.error(error_msg)
        return error_msg


# For manual testing
if __name__ == "__main__":
    sample_data = {
        "title": "John Doe | Machine Learning Engineer",
        "description": "Building intelligent systems with deep learning, LLMs, and production-scale data pipelines."
    }
    print(analyze_linkedin_profile(sample_data))
